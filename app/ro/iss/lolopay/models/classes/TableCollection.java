package ro.iss.lolopay.models.classes;

import org.bson.types.ObjectId;
import org.mongodb.morphia.annotations.Id;
import org.mongodb.morphia.annotations.PrePersist;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import play.libs.Json;

@JsonInclude(Include.NON_NULL)
public abstract class TableCollection {
  /** Unique id */
  @JsonSerialize(using = ToStringSerializer.class)
  @Id
  private String id;

  private Long createdAt;

  @JsonIgnore private ApplicationStamp createdBy;

  private Long updatedAt;

  @JsonIgnore private ApplicationStamp updatedBy;

  /**
   * Getter for collection Id
   *
   * @return
   */
  public String getId() {

    return id;
  }

  /**
   * Setter for collection Id, will be generated by the system
   *
   * @param id
   */
  public void setId(String id) {

    this.id = id;
  }

  /** @return the createdAt */
  public Long getCreatedAt() {

    return createdAt;
  }

  /** @param createdAt the createdAt to set */
  public void setCreatedAt(Long createdAt) {

    this.createdAt = createdAt;
  }

  /** @return the updatedAt */
  public Long getUpdatedAt() {

    return updatedAt;
  }

  /** @param updatedAt the updatedAt to set */
  public void setUpdatedAt(Long updatedAt) {

    this.updatedAt = updatedAt;
  }

  /** @return the createdBy */
  public ApplicationStamp getCreatedBy() {

    return createdBy;
  }

  /** @param createdBy the createdBy to set */
  public void setCreatedBy(ApplicationStamp createdBy) {

    this.createdBy = createdBy;
  }

  /** @return the updatedBy */
  public ApplicationStamp getUpdatedBy() {

    return updatedBy;
  }

  /** @param updatedBy the updatedBy to set */
  public void setUpdatedBy(ApplicationStamp updatedBy) {

    this.updatedBy = updatedBy;
  }

  /**
   * Fast setter for audit trail
   *
   * @param user
   * @param timeStamp
   */
  public void updateAudit(ApplicationStamp userStamp) {

    // if there is no record id
    if (this.getId() == null) {
      // update created at as well , we have a new record
      this.createdBy = userStamp;
    }

    // update audit is changed every time
    this.updatedBy = userStamp;
  }

  /** Compare collections by session id only */
  @Override
  public boolean equals(Object obj) {

    if (obj == null) {
      return false;
    }
    if (!TableCollection.class.isAssignableFrom(obj.getClass())) {
      return false;
    }
    final TableCollection other = (TableCollection) obj;

    if (!this.id.toString().equals(other.id.toString())) {
      return false;
    }
    return true;
  }

  /** Before collection save hook */
  @PrePersist
  public void beforeSave() {

    // if there is no record id
    if (this.getId() == null) {
      // set up record id
      ObjectId newId = new ObjectId();
      this.id = newId.toString();

      // update created at as well , we have a new record
      this.createdAt = System.currentTimeMillis() / 1000L;
    }

    // update audit is changed every time
    this.updatedAt = System.currentTimeMillis() / 1000L;
  }

  /*
   * (non-Javadoc)
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {

    return Json.toJson(this).toString();
  }
}
