package ro.iss.lolopay.programs;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import com.opencsv.bean.CsvToBeanBuilder;
import ro.iss.lolopay.models.database.Wallet;
import ro.iss.lolopay.models.main.Account;
import ro.iss.lolopay.models.services.definition.WalletService;
import ro.iss.lolopay.models.services.implementation.WalletImplementation;
import ro.iss.lolopay.programs.classes.MangoWallet;
import ro.iss.lolopay.services.definition.DatabaseService;
import ro.iss.lolopay.services.definition.LogService;
import ro.iss.lolopay.services.implementation.DatabaseImplementation;
import ro.iss.lolopay.services.implementation.LogImplementation;

public class CheckBalances {

  public static void main(String[] args) throws Exception {

    // declare folder were csv reports will be put
    String mongoWalletReportsFolder = args[0];

    LogService logService = new LogImplementation();

    DatabaseService databaseService = new DatabaseImplementation(logService);

    String requestId = "1234";
    Account account =
        databaseService.getMainConnection().createQuery(Account.class).asList().get(0);

    // get wallet implementation for database query
    WalletService walletService = new WalletImplementation(databaseService);

    // construct directory where csv reports are located
    File dir = new File(mongoWalletReportsFolder);

    // get array with files
    File[] dirFiles = dir.listFiles();

    // count number of wallets from mango reports
    int nbWallets = 0;

    // iterate over files
    for (File file : dirFiles) {
      // parse only csv files found inside folder
      if (file.getName().toLowerCase().endsWith(".csv")) {
        try {
          // read csv and cast rows to MangoWallet
          CsvToBeanBuilder<MangoWallet> csvToBeanBuilder =
              new CsvToBeanBuilder<MangoWallet>(new FileReader(file.getAbsolutePath()))
                  .withType(MangoWallet.class)
                  .withOrderedResults(false);

          // get iterator of MangoWallet from current file
          Iterator<MangoWallet> fileMangoWallets = csvToBeanBuilder.build().iterator();

          // go through every line in the csv file
          while (fileMangoWallets.hasNext()) {
            // increment number representing wallets from mango reports
            nbWallets++;

            // get MangoWallet object of current csv row
            MangoWallet mangoWallet = fileMangoWallets.next();

            // get database wallet
            Wallet loloWallet =
                walletService.getWalletByProviderId(requestId, account, mangoWallet.getId());

            if (loloWallet == null) {
              System.out.println("WALLET NOT FOUND START");
              System.out.println("Id: " + mangoWallet.getId());
              System.out.println("Description: " + mangoWallet.getDescription());
              System.out.println("Owners: " + mangoWallet.getOwners());
              System.out.println("Tag: " + mangoWallet.getTag());
              System.out.println("WALLET NOT FOUND END\n");
            } else {
              // compare balances of wallets
              if (loloWallet.getProviderId().equals(mangoWallet.getId())) {
                // print wallet with different balance
                if (loloWallet.getBalance().getValue().equals(mangoWallet.getBalanceAmount())
                    == false) {
                  System.out.println("id: " + loloWallet.getId());
                  System.out.println("userId: " + loloWallet.getUserId());
                  System.out.println("description: " + loloWallet.getDescription());
                  System.out.println(
                      "type: "
                          + (loloWallet.getType() == null
                              ? "null"
                              : loloWallet.getType().toString()));
                  System.out.println("currency: " + loloWallet.getCurrency());
                  System.out.println("providerId: " + loloWallet.getProviderId());
                  System.out.println("CustomTag: " + loloWallet.getCustomTag());
                  System.out.println(
                      "LOLO blockedBalancevalue: " + loloWallet.getBlockedBalance().getValue());
                  System.out.println("LOLO balance value: " + loloWallet.getBalance().getValue());
                  System.out.println("MANGO balance value: " + mangoWallet.getBalanceAmount());
                  System.out.println("*****\n");
                }
              }
            }
          }
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }

    // print number of wallets found in csv files generated by Mango reports
    System.out.println("Total number of wallets from Mango Reports: " + nbWallets);

    // count number of records from database to confirm that all wallets were processed
    long nbDatabaseWallets =
        databaseService.getConnection(account.getId().toString()).getCount(Wallet.class);

    // print number of wallets found in database
    System.out.println("Total number of wallets from Database: " + nbDatabaseWallets);
  }
}
