POST 	/												ro.iss.lolopay.controllers.HomeController.index(request: Request)

POST	/login											ro.iss.lolopay.controllers.AuthenticationController.login(request: Request)
GET		/refresh										ro.iss.lolopay.controllers.AuthenticationController.refresh(request: Request)

POST	/users/create/natural							ro.iss.lolopay.controllers.UserController.createNatural(request: Request)
POST	/users/create/legal								ro.iss.lolopay.controllers.UserController.createLegal(request: Request)
POST	/users/save/natural								ro.iss.lolopay.controllers.UserController.saveNatural(request: Request)
POST	/users/save/legal								ro.iss.lolopay.controllers.UserController.saveLegal(request: Request)
GET 	/users/:userId									ro.iss.lolopay.controllers.UserController.get(request: Request, userId: String)
GET 	/users/:userId/bankaccounts/:bankAccountId		ro.iss.lolopay.controllers.UserController.getBankAccount(request: Request, userId: String, bankAccountId: String)
GET		/users/:userId/bankaccounts						ro.iss.lolopay.controllers.UserController.getBankAccounts(request: Request, userId: String, page:Int ?= 1, pageSize:Int ?= 10)
GET		/users/:userId/wallets							ro.iss.lolopay.controllers.UserController.getWallets(request: Request, userId: String, page:Int ?= 1, pageSize:Int ?= 10)
GET		/users/:userId/documents						ro.iss.lolopay.controllers.UserController.getDocuments(request: Request, userId: String, page:Int ?= 1, pageSize:Int ?= 10)
GET		/users/:userId/disputes							ro.iss.lolopay.controllers.UserController.getDisputes(request: Request, userId: String, page:Int ?= 1, pageSize:Int ?= 10)
GET		/users/anonymize/:userId						ro.iss.lolopay.controllers.UserController.anonymize(request: Request, userId: String)

POST	/wallets/create									ro.iss.lolopay.controllers.WalletController.create(request: Request)
GET 	/wallets/:walletId								ro.iss.lolopay.controllers.WalletController.get(request: Request, walletId: String)
GET		/wallets/:walletId/transactions					ro.iss.lolopay.controllers.WalletController.transactions(request: Request, walletId: String, page:Int ?= 1, pageSize:Int ?= 10)
GET		/wallets/:walletId/transactionsNoFees			ro.iss.lolopay.controllers.WalletController.transactionsNoFees(request: Request, walletId: String, page:Int ?= 1, pageSize:Int ?= 10, sort:String ?= null)
GET		/wallets/company/:walletId/update				ro.iss.lolopay.controllers.WalletController.updateCompanyWallets(request: Request, walletId: String)

POST	/bankaccounts/create/iban						ro.iss.lolopay.controllers.BankAccountController.createIban(request: Request)
POST	/bankaccounts/create/us							ro.iss.lolopay.controllers.BankAccountController.createUs(request: Request)
POST	/bankaccounts/create/gb							ro.iss.lolopay.controllers.BankAccountController.createGb(request: Request)
POST	/bankaccounts/create/ca							ro.iss.lolopay.controllers.BankAccountController.createCa(request: Request)
POST	/bankaccounts/create/other						ro.iss.lolopay.controllers.BankAccountController.createOther(request: Request)
POST	/bankaccounts/deactivate						ro.iss.lolopay.controllers.BankAccountController.deactivateBankAccount(request: Request)

POST	/transactions/create/transfer					    ro.iss.lolopay.controllers.TransactionController.createTransfer(request: Request)
POST	/transactions/create/payout						    ro.iss.lolopay.controllers.TransactionController.createPayOut(request: Request)
POST	/transactions/create/payin						    ro.iss.lolopay.controllers.TransactionController.createPayIn(request: Request)
POST	/transactions/create/direct/payin				    ro.iss.lolopay.controllers.TransactionController.createDirectPayIn(request: Request)
POST	/transactions/create/direct/payin/avs			    ro.iss.lolopay.controllers.TransactionController.createAVSDirectPayIn(request: Request)
POST	/transactions/create/refund						    ro.iss.lolopay.controllers.TransactionController.refundTransaction(request: Request)
POST	/transactions/payin/:payInId/refunds			    ro.iss.lolopay.controllers.TransactionController.refundPayIn(request: Request, payInId: String)
GET		/transactions/:transactionId					    ro.iss.lolopay.controllers.TransactionController.get(request: Request, transactionId: String)
GET		/transactions/:transactionId/transaction		    ro.iss.lolopay.controllers.TransactionController.get(request: Request, transactionId: String)
GET		/transactions/:transactionId/transfer			    ro.iss.lolopay.controllers.TransactionController.getTransfer(request: Request, transactionId: String)
GET		/transactions/:transactionId/payout				    ro.iss.lolopay.controllers.TransactionController.getPayOut(request: Request, transactionId: String)
GET		/transactions/:transactionId/payin				    ro.iss.lolopay.controllers.TransactionController.getPayIn(request: Request, transactionId: String)
GET		/transactions/:transactionId/refund				    ro.iss.lolopay.controllers.TransactionController.getTransferRefund(request: Request, transactionId: String)
GET		/transactions/:transactionId/payin/status	        ro.iss.lolopay.controllers.TransactionController.getPayInStatusByProviderId(request: Request, transactionId: String)

POST	/documents/create								ro.iss.lolopay.controllers.DocumentController.createDocument(request: Request)
POST	/documents/create/page							ro.iss.lolopay.controllers.DocumentController.createDocumentPage(request: Request)
POST	/documents/submit								ro.iss.lolopay.controllers.DocumentController.submitDocument(request: Request)
GET		/documents/:documentId							ro.iss.lolopay.controllers.DocumentController.get(request: Request, documentId: String)
GET		/documents										ro.iss.lolopay.controllers.DocumentController.getAllDocuments(request: Request, page:Int ?= 1, pageSize:Int ?= 10)

POST	/ubo/create/declaration/:userId    	   		      ro.iss.lolopay.controllers.UboController.createUboDeclaration(request: Request, userId: String)
POST	/ubo/submit/declaration/:userId/:declarationId    ro.iss.lolopay.controllers.UboController.submitUboDeclaration(request: Request, userId: String, declarationId: String)
POST	/ubo/create/entity/:userId/:declarationId		  ro.iss.lolopay.controllers.UboController.createUbo(request: Request, userId: String, declarationId: String)
PUT 	/ubo/update/entity/:userId/:declarationId/:uboId  ro.iss.lolopay.controllers.UboController.updateUbo(request: Request, userId: String, declarationId: String, uboId: String)
GET		/ubo/declaration/:declarationId				      ro.iss.lolopay.controllers.UboController.getUboDeclaration(request: Request, declarationId: String)

#TODO action for approval of documents

GET		/callbacks/processed/:accountId/:applicationId/:callbackId		ro.iss.lolopay.controllers.CallbackController.getProcessedCallback(request: Request, accountId: String, applicationId: String, callbackId: String)
GET		/callbacks/mango												ro.iss.lolopay.controllers.CallbackController.mango(request: Request, accountId: String="", applicationId: String="")
GET		/callbacks/mango/:accountId/:applicationId						ro.iss.lolopay.controllers.CallbackController.mango(request: Request, accountId: String, applicationId: String)
GET		/callbacks/mango/:accountId/:applicationId/return				ro.iss.lolopay.controllers.CallbackController.mangoReturn(request: Request, accountId: String, applicationId: String)
POST	/callbacks/pfs/:accountId/:applicationId/rtf					ro.iss.lolopay.controllers.CallbackController.pfsRtf(request: Request, accountId: String, applicationId: String)
POST	/callbacks/pfs/:accountId/:applicationId						ro.iss.lolopay.controllers.CallbackController.pfs(request: Request, accountId: String, applicationId: String)

POST	/cards/create														ro.iss.lolopay.controllers.BankCardsController.createCard(request: Request)
POST	/cards/upgrade														ro.iss.lolopay.controllers.BankCardsController.upgradeCard(request: Request)
POST	/cards/changeStatus													ro.iss.lolopay.controllers.BankCardsController.changeStatus(request: Request)
POST	/cards/addCurrency													ro.iss.lolopay.controllers.BankCardsController.addCurrency(request: Request)
POST	/cards/transferTo													ro.iss.lolopay.controllers.BankCardsController.transferTo(request: Request)
POST	/cards/transferFrom													ro.iss.lolopay.controllers.BankCardsController.transferFrom(request: Request)
POST	/cards/sendPin														ro.iss.lolopay.controllers.BankCardsController.sendPin(request: Request)
POST	/cards/lockUnlock													ro.iss.lolopay.controllers.BankCardsController.lockUnlock(request: Request)
POST	/cards/update														ro.iss.lolopay.controllers.BankCardsController.update(request: Request)
POST	/cards/executeBankPayment											ro.iss.lolopay.controllers.BankCardsController.executeBankPayment(request: Request)
POST	/cards/getCurrencyFxQuote											ro.iss.lolopay.controllers.BankCardsController.getCurrencyFxQuote(request: Request)
POST	/cards/replaceCard													ro.iss.lolopay.controllers.BankCardsController.replaceCard(request: Request)
POST	/cards/executeCardWalletsTrade										ro.iss.lolopay.controllers.BankCardsController.executeCardWalletsTrade(request: Request)
GET		/cards/companyWallets												ro.iss.lolopay.controllers.BankCardsController.companyWallets(request: Request)
GET		/cards/:cardId														ro.iss.lolopay.controllers.BankCardsController.get(request: Request, cardId: String)
GET		/cards/:cardId/retrieveManuallyReissuedCard/:reissuedCardProviderId ro.iss.lolopay.controllers.BankCardsController.retrieveManuallyReissuedCard(request: Request, cardId: String, reissuedCardProviderId: String)
GET		/cards/:cardId/wallet/:currency										ro.iss.lolopay.controllers.BankCardsController.getCardWallet(request: Request, cardId: String, currency: String)
GET		/cards/:cardId/wallet/:currency/transactions/:startDate/:endDate	ro.iss.lolopay.controllers.BankCardsController.getCardWalletTransactions(request: Request, cardId: String, currency: String, startDate: Long, endDate: Long)
GET		/cards/:cardId/number												ro.iss.lolopay.controllers.BankCardsController.getCardNumber(request: Request, cardId: String)
GET		/cards/:cardId/numberLocal											ro.iss.lolopay.controllers.BankCardsController.getCardNumberLocal(request: Request, cardId: String)
GET		/cards/:cardId/expiryDate											ro.iss.lolopay.controllers.BankCardsController.getCardExpiryDate(request: Request, cardId: String)
GET		/cards/:cardId/cvv													ro.iss.lolopay.controllers.BankCardsController.getCardCVV(request: Request, cardId: String)

POST	/cardregistrations								ro.iss.lolopay.controllers.CardRegistrationsController.createCardRegistration(request: Request)
PUT		/cardregistrations/:cardRegistrationProviderId  ro.iss.lolopay.controllers.CardRegistrationsController.updateCardRegistration(request: Request, cardRegistrationProviderId: String)
GET		/cardregistrations/:cardRegistrationId			ro.iss.lolopay.controllers.CardRegistrationsController.receiveToken(request: Request, cardRegistrationId: String, data: String)
PUT		/cardregistrations/card/:cardId					ro.iss.lolopay.controllers.CardRegistrationsController.deactivateCard(request: Request, cardId: String)
GET		/cardregistrations/card/:cardProviderId			ro.iss.lolopay.controllers.CardRegistrationsController.getCardByProviderId(request: Request, cardProviderId: String)

GET		/getErrors										ro.iss.lolopay.controllers.HelperController.getErrors(request: Request)
GET		/test											ro.iss.lolopay.controllers.HelperController.test(request: Request)
POST	/testHook										ro.iss.lolopay.controllers.HelperController.testHook(request: Request)
GET		/testHook										ro.iss.lolopay.controllers.HelperController.testHook(request: Request)
POST 	/updateWalletBallance/:walletId/:amount			ro.iss.lolopay.controllers.HelperController.updateWalletBalance(request: Request, walletId: String, amount:Int)
POST 	/deleteUser/:userId								ro.iss.lolopay.controllers.HelperController.deleteUser(request: Request, userId: String)
POST 	/deleteWallet/:walletId							ro.iss.lolopay.controllers.HelperController.deleteWallet(request: Request, walletId: String)
GET		/request/:requestId								ro.iss.lolopay.controllers.HelperController.getRequest(request: Request, requestId: String)
GET		/monitor										ro.iss.lolopay.controllers.HelperController.monitor(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET		/assets/*file 	controllers.Assets.versioned(path="/public", file: Asset)
GET		/favicon.ico	controllers.Assets.at(path="/public", file="favicon.gif")

